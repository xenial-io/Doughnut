@page "/admin/activities"

@inject UnitOfWork uow

<Typography
    Variant="@TypographyVariant.H4">
    <WorkIcon /> Activities
</Typography>

<Toolbar Disabled="@IsLoading">
    <IconButton
        Disabled="@IsLoading"
        aria-label="new">
        <AddCircleIcon />
    </IconButton>
    <IconButton
        Disabled="@IsLoading"
        aria-label="delete">
        <DeleteIcon />
    </IconButton>
    <IconButton
        Disabled="@IsLoading"
        OnClick="@Refresh"
        aria-label="refresh">
        <RefreshIcon />
    </IconButton>
@*    <Typography
        Class="demo-table-toolbar-title"
        Variant="@TypographyVariant.H6"
        Id="tableTitle">
        Nutrition
    </Typography>
    <IconButton
        aria-label="filter list">
        <FilterListIcon />
    </IconButton>*@
    
</Toolbar>
@if(IsLoading)
{
    <CircularProgress
            Variant="@CircularProgressVariant.Indeterminate"
            DisableShrink
            Size="64"
            Thickness="4" />
}
else
{
 <div
    style="overflow-x: auto;">
    <Table
        Style="min-width: 750px"
        Size="@Size"
        aria-labelledby="tableTitle"
        aria-label="enhanced table">
        <TableHead>
            <TableRow>
                <TableCell
                    Padding="@Padding.Checkbox">
                    <Checkbox
                        OnChange="@OnSelectAllClick"
                        InputProps="@(new Dictionary<string, object>{{ "aria-label", $"select all desserts" }})" />
                </TableCell>
                <TableCell
                    Padding="@Padding.None">
                    @CreateSortableColumn("Name", "Dessert (100g serving)")
                </TableCell>
                @* <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Calories", "Calories")
                </TableCell>
                <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Fat", "Fat (g)")
                </TableCell>
                <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Carbs", "Carbs (g)")
                </TableCell>
                <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Protein", "Protein (g)")
                </TableCell> *@
            </TableRow>
        </TableHead>
        <TableBody>
            @foreach(var row in Rows)
            {
                <TableRow
                    Hover
                    @key="@row.Oid">
                    @* <TableCell
                        Padding="@Padding.Checkbox">
                        <Checkbox
                            Checked="@row.Selected"
                            InputProps="@(new Dictionary<string, object>{{ "aria-labelledby", $"enhanced-table-checkbox-{row.Name}" }})" />
                    </TableCell> *@
                    <TableCell
                        Component="th"
                        Padding="@Padding.None"
                        Scope="row">
                        @row.Name
                    </TableCell>
                    @* <TableCell
                        Align="@Align.Right">
                        @row.Calories
                    </TableCell>
                    <TableCell
                        Align="@Align.Right">
                        @row.Fat
                    </TableCell>
                    <TableCell
                        Align="@Align.Right">
                        @row.Carbs
                    </TableCell>
                    <TableCell
                        Align="@Align.Right">
                        @row.Protein
                    </TableCell> *@
                </TableRow>
            }
        </TableBody>
    </Table>
    @* <DetailDialog Open="true" /> *@
    </div>
}
@code {
    private bool IsLoading { get; set; } = true;

    private string OrderBy { set; get; } = "Calories";

    private Sort Direction { set; get; } = Sort.Ascending;

    private string SortMessage => "sort " + (Direction == Sort.Descending ? "descending" : "ascending");

    private RenderFragment CreateSortableColumn(string name, string label)
    {
        return @<TableSortLabel
                    Active="@(OrderBy == name)"
                    Direction="@Direction"
                    OnClick="@CreateOnSortClick(name)">
                    @label
                    @if (OrderBy == name)
                    {
                        <span class="demo-sort-visually-hidden">
                            @SortMessage
                        </span>
                    }
                </TableSortLabel>;
    }

    private EventCallback<EventArgs> CreateOnSortClick(string name)
    {
        return EventCallback.Factory.Create<System.EventArgs>(this, (_) =>
        {
            HandleSortClick(name);
        });
    }

    private void HandleSortClick(string name)
    {
        /*
        if (OrderBy == name)
        {
            Direction = Direction == Sort.Ascending ? Sort.Descending : Sort.Ascending;
        } else
        {
            Direction = Sort.Ascending;
        }

        OrderBy = name;
        */

        StateHasChanged();
    }

    private string media = "@media";

    //private string ToolbarClass => $"demo-table-toolbar{(HasSelection ? " demo-table-toolbar-hilight" : "")}";

    private bool Dense { set; get; } = false;

    private Size Size => Dense ? Size.Small : Size.Medium;

    //private bool AnySelected => HasSelection && SelectedCount < Rows.Count;

    //private bool AllSelected => Rows.All(row => row.Selected);

    //private int SelectedCount => Rows.Count(row => row.Selected);

    //private bool HasSelection => SelectedCount > 0;

    //private int RowsPerPage => 6;

    //private int EmptyRows => RowsPerPage - Rows.Count;

    //private int EmptyHeight => (Dense ? 33 : 53) * EmptyRows;

    private void OnDenseChanged(EventArgs args)
    {
        Dense = !Dense;

        StateHasChanged();
    }

    private void OnSelectAllClick(EventArgs args)
    {
        //var allSelected = AllSelected;

        //Rows.ForEach(row => row.Selected = !allSelected);

        StateHasChanged();
    }

    private IList<Customer> Rows = new List<Customer>();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            await uow.UpdateSchemaAsync();
            await Refresh();
        }
        finally
        {
            IsLoading = false;
        }
    }

    async Task Refresh()
    {
        IsLoading = true;
        try
        {
            Rows = await uow.Query<Customer>().ToListAsync();
        }
        finally
        {
            IsLoading = false;
        }
    }
}
