@page "/admin/activities"

@inject UnitOfWork uow

<Typography
    Variant="@TypographyVariant.H4">
    <WorkIcon /> Activities
</Typography>

<Toolbar>
    <IconButton
        aria-label="new">
        <AddCircleIcon />
    </IconButton>
    <IconButton
        aria-label="delete">
        <DeleteIcon />
    </IconButton>
          
@*    <Typography
        Class="demo-table-toolbar-title"
        Variant="@TypographyVariant.H6"
        Id="tableTitle">
        Nutrition
    </Typography>
    <IconButton
        aria-label="filter list">
        <FilterListIcon />
    </IconButton>*@
    
</Toolbar>
 <div
    style="overflow-x: auto;">
    <Table
        Style="min-width: 750px"
        Size="@Size"
        aria-labelledby="tableTitle"
        aria-label="enhanced table">
        <TableHead>
            <TableRow>
                <TableCell
                    Padding="@Padding.Checkbox">
                    <Checkbox
                        Indeterminate="@AnySelected"
                        Checked="@AllSelected"
                        OnChange="@OnSelectAllClick"
                        InputProps="@(new Dictionary<string, object>{{ "aria-label", $"select all desserts" }})" />
                </TableCell>
                <TableCell
                    Padding="@Padding.None">
                    @CreateSortableColumn("Name", "Dessert (100g serving)")
                </TableCell>
                <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Calories", "Calories")
                </TableCell>
                <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Fat", "Fat (g)")
                </TableCell>
                <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Carbs", "Carbs (g)")
                </TableCell>
                <TableCell
                    Align="@Align.Right">
                    @CreateSortableColumn("Protein", "Protein (g)")
                </TableCell>
            </TableRow>
        </TableHead>
        <TableBody>
            @foreach(var row in GetSortedRows())
            {
                <TableRow
                    Hover
                    @key="@row"
                    OnClick="@((_) => row.Selected = !row.Selected)"
                    TabIndex="-1"
                    Selected="@row.Selected"
                    aria-checked="@row.Selected"
                    Role="checkbox">
                    <TableCell
                        Padding="@Padding.Checkbox">
                        <Checkbox
                            Checked="@row.Selected"
                            InputProps="@(new Dictionary<string, object>{{ "aria-labelledby", $"enhanced-table-checkbox-{row.Name}" }})" />
                    </TableCell>
                    <TableCell
                        Component="th"
                        Padding="@Padding.None"
                        Scope="row">
                        @row.Name
                    </TableCell>
                    <TableCell
                        Align="@Align.Right">
                        @row.Calories
                    </TableCell>
                    <TableCell
                        Align="@Align.Right">
                        @row.Fat
                    </TableCell>
                    <TableCell
                        Align="@Align.Right">
                        @row.Carbs
                    </TableCell>
                    <TableCell
                        Align="@Align.Right">
                        @row.Protein
                    </TableCell>
                </TableRow>
            }
            @if (EmptyRows > 0)
            {
                <TableRow
                    Style="@($"height: {EmptyHeight}px;")">
                    <TableCell
                        colspan="6" />
                </TableRow>
            }
        </TableBody>
    </Table>
    <DetailDialog Open="true" />
    </div>
@code {
     private string OrderBy { set; get; } = "Calories";

    private Sort Direction { set; get; } = Sort.Ascending;

    private string SortMessage => "sort " + (Direction == Sort.Descending ? "descending" : "ascending");

    private RenderFragment CreateSortableColumn(string name, string label)
    {
        return @<TableSortLabel
                    Active="@(OrderBy == name)"
                    Direction="@Direction"
                    OnClick="@CreateOnSortClick(name)">
                    @label
                    @if (OrderBy == name)
                    {
                        <span class="demo-sort-visually-hidden">
                            @SortMessage
                        </span>
                    }
                </TableSortLabel>;
    }

    private EventCallback<EventArgs> CreateOnSortClick(string name)
    {
        return EventCallback.Factory.Create<System.EventArgs>(this, (_) =>
        {
            HandleSortClick(name);
        });
    }

    private IEnumerable<Dessert> GetSortedRows()
    {
        if (Direction == Sort.Ascending)
        {
            if (OrderBy == "Name")
                return Rows.OrderBy(row => row.Name);
            else if (OrderBy == "Calories")
                return Rows.OrderBy(row => row.Calories);
            else if (OrderBy == "Fat")
                return Rows.OrderBy(row => row.Fat);
            else if (OrderBy == "Carbs")
                return Rows.OrderBy(row => row.Carbs);
            else if (OrderBy == "Protein")
                return Rows.OrderBy(row => row.Protein);
        } else
        {
            if (OrderBy == "Name")
                return Rows.OrderByDescending(row => row.Name);
            else if (OrderBy == "Calories")
                return Rows.OrderByDescending(row => row.Calories);
            else if (OrderBy == "Fat")
                return Rows.OrderByDescending(row => row.Fat);
            else if (OrderBy == "Carbs")
                return Rows.OrderByDescending(row => row.Carbs);
            else if (OrderBy == "Protein")
                return Rows.OrderByDescending(row => row.Protein);
        }
        return Rows;
    }

    private void HandleSortClick(string name)
    {
        if (OrderBy == name)
        {
            Direction = Direction == Sort.Ascending ? Sort.Descending : Sort.Ascending;
        } else
        {
            Direction = Sort.Ascending;
        }

        OrderBy = name;

        StateHasChanged();
    }

    private string media = "@media";

    private string ToolbarClass => $"demo-table-toolbar{(HasSelection ? " demo-table-toolbar-hilight" : "")}";

    private bool Dense { set; get; } = false;

    private Size Size => Dense ? Size.Small : Size.Medium;

    private bool AnySelected => HasSelection && SelectedCount < Rows.Count;

    private bool AllSelected => Rows.All(row => row.Selected);

    private int SelectedCount => Rows.Count(row => row.Selected);

    private bool HasSelection => SelectedCount > 0;

    private int RowsPerPage => 6;

    private int EmptyRows => RowsPerPage - Rows.Count;

    private int EmptyHeight => (Dense ? 33 : 53) * EmptyRows;

    private void OnDenseChanged(EventArgs args)
    {
        Dense = !Dense;

        StateHasChanged();
    }

    private void OnSelectAllClick(EventArgs args)
    {
        var allSelected = AllSelected;

        Rows.ForEach(row => row.Selected = !allSelected);

        StateHasChanged();
    }

    private List<Dessert> Rows = new List<Dessert>
    {
        new Dessert("Frozen yoghurt", 159, 6.0, 24, 4.0),

        new Dessert("Ice cream sandwich", 237, 9.0, 37, 4.3),

        new Dessert("Eclair", 262, 16.0, 24, 6.0),

        new Dessert("Cupcake", 305, 3.7, 67, 4.3),

        new Dessert("Gingerbread", 356, 16.0, 49, 3.9)
    };

    public class Dessert
    {
        public Dessert(string name, int calories, double fat, double carbs, double protein)
        {
            Name = name;

            Calories = calories;

            Fat = fat;

            Carbs = carbs;

            Protein = protein;
        }

        public string Name { set; get; }

        public int Calories { set; get; }

        public double Fat { set; get; }

        public double Carbs { set; get; }

        public double Protein { set; get; }

        public bool Selected { set; get; }
    }
}
