@inject UnitOfWork uow

<DetailDialog Open="@Open" OnClosed="@(async () => await Close())" OnSave="@(async () => await Save())" Title="Add Activity">
    <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            Name
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@Name"
                    OnChange="@OnNameChanged" />
    </FormControl>

    <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            Street
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@Street"
                    OnChange="@OnStreetChanged" />
    </FormControl>

    <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            Zipcode
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@ZipCode"
                    OnChange="@OnZipCodeChanged" />
    </FormControl>

    <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            City
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@City"
                    OnChange="@OnCityChanged" />
    </FormControl>

</DetailDialog>

@code {
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public EventCallback OnClosed { get; set; } = EventCallback.Empty;

    private string Name { get; set; }
    private string Street { get; set; }
    private string ZipCode { get; set; }
    private string City { get; set; }

    private void OnNameChanged(ChangeEventArgs args)
    {
        Name = args.Value?.ToString();
    }

    private void OnStreetChanged(ChangeEventArgs args)
    {
        Street  = args.Value?.ToString();
    }

    private void OnZipCodeChanged(ChangeEventArgs args)
    {
        ZipCode = args.Value?.ToString();
    }

    private void OnCityChanged(ChangeEventArgs args)
    {
        City = args.Value?.ToString();
    }

    public async Task Close()
    {
        Open = false;
        await OnClosed.InvokeAsync();
    }

    private async Task Save()
    {
        if(!string.IsNullOrEmpty(Name))
        {
            var activity = new Customer(uow)
            {
                Name = Name,
                Street = Street,
                City = City,
                ZipCode = ZipCode,
            };
            await uow.CommitChangesAsync();
        }
    }
}