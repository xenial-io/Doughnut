@inject UnitOfWork uow

<DetailDialog Open="@Open"
              OnClosed="@(async () => await Close())"
              OnSave="@(async () => await Save())"
              Title="Edit Activity">
   <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            Name
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@Customer.Name"
                    OnChange="@OnNameChanged" />
    </FormControl>

    <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            Street
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@Customer.Street"
                    OnChange="@OnStreetChanged" />
    </FormControl>

    <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            Zipcode
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@Customer.ZipCode"
                    OnChange="@OnZipCodeChanged" />
    </FormControl>

    <FormControl Style="margin-bottom: 8px;"
                    FullWidth>
        <InputLabel For="component-helper">
            City
        </InputLabel>
        <StandardInput Id="component-helper"
                    Value="@Customer.City"
                    OnChange="@OnCityChanged" />
    </FormControl>

</DetailDialog>

@code {
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Customer = await uow.GetObjectByKeyAsync<Customer>(Id);
        await base.OnParametersSetAsync();
    }

    [Parameter]
    public EventCallback OnClosed { get; set; } = EventCallback.Empty;

    private Customer Customer { get; set; }

    private void OnNameChanged(ChangeEventArgs args)
    {
        if (Customer is not null)
        {
            Customer.Name = args.Value?.ToString();
        }
    }

    private void OnStreetChanged(ChangeEventArgs args)
    {
        if (Customer is not null)
        {
            Customer.Street = args.Value?.ToString();
        }
    }

    private void OnZipCodeChanged(ChangeEventArgs args)
    {
        if (Customer is not null)
        {
            Customer.ZipCode = args.Value?.ToString();
        }
    }

    private void OnCityChanged(ChangeEventArgs args)
    {
        if (Customer is not null)
        {
            Customer.City = args.Value?.ToString();
        }
    }

    public async Task Close()
    {
        Open = false;
        Customer = null;
        await OnClosed.InvokeAsync();
    }

    private async Task Save()
        => await uow.CommitChangesAsync();
}
