@page "/fetchdata"
@attribute [Authorize]
@inject HttpClient Http
@inject UnitOfWork uow

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<button @onclick="Generate">Generate</button>
<button @onclick="Refresh">Refresh</button>

@if (Customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in Customers)
            {
                <tr>
                    <td>@forecast.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Customer> Customers;

    protected override async Task OnInitializedAsync()
    {
        await uow.UpdateSchemaAsync();
        
        await Refresh();
    }

    async Task Generate()
    {
        var faker = new Bogus.Faker<Customer>().CustomInstantiator(c => new Customer(uow))
                    .RuleFor(p => p.Name, f => f.Name.FullName());

        Customers = faker.Generate(100);
        if (uow.InTransaction)
        {
            await uow.CommitChangesAsync();
        }
    }

    async Task Refresh()
    {
        Customers = await uow.Query<Customer>().ToListAsync();
    }
}
