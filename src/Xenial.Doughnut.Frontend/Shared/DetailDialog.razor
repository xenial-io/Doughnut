@inherits MaterialComponentBase

@inject ILayoutConfig LayoutConfig
@inject MediaQueryMatcher MediaQueryMatcher

<Dialog
    DisableBackdropClick
    FullScreen="@FullScreen"
    aria-labelledby="responsive-dialog-title"
    OnClose="@(async () => await OnClose())"
    OnEscapeKeyDown="@(async () => await OnClose())"
    Open="@Open">
    @if(Title is not null)
    {
        <DialogTitle
            Id="responsive-dialog-title">
            @Title
        </DialogTitle>
    }
    <DialogContent>
        @ChildContent
    </DialogContent>
    <DialogActions>
        <Button
            OnClick="@OnClose"
            Color="@Color.Secondary">
            Cancel
        </Button>
        <Button
            OnClick="@Save"
            Color="@Color.Primary"
            AutoFocus>
            Save
        </Button>
    </DialogActions>
</Dialog>

@code
{
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool Open { set; get; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback OnSave { get; set; } = EventCallback.Empty;

    private IDisposable TimeoutDisposal { set; get; }

    private bool FullScreen { set; get; }

    private async Task OnClose()
    {
        Console.WriteLine("Close");
        Open = false;

        StateHasChanged();
        await OnClosed.InvokeAsync();
    }

    private async Task Save()
    {
        Console.WriteLine("SAVEE");
        await OnSave.InvokeAsync();
        await OnClose();
    }

    protected override Task OnInitializedAsync()
    {
        MediaQueryMatcher.OnChange += OnMediaQueryChanged;

        TimeoutDisposal = ExecutionPlan.Delay(500, () => {
            _ = MediaQueryMatcher.RegisterAsync("(max-width:959.95px)");
        });

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync()
    {
        await MediaQueryMatcher.RegisterAsync("(max-width:959.95px)");
        await base.OnAfterRenderAsync();
    }

    protected void OnMediaQueryChanged(object sender, bool match)
    {
        if(FullScreen != match)
        {
            FullScreen = match;

            StateHasChanged();
        }
    }

    protected override void Dispose()
    {
        TimeoutDisposal?.Dispose();

        if (LayoutConfig.Responsive)
        {
            MediaQueryMatcher.OnChange -= OnMediaQueryChanged;

            _ = MediaQueryMatcher.UnRegisterAsync();
        }
    }
}
