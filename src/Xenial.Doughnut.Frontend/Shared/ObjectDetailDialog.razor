@typeparam TItem

@inject UnitOfWork uow

<DetailDialog Open="@Open" OnClosed="@(async () => await Close())" OnSave="@(async () => await Save())" Title="@Title">
    <CascadingValue Value="@uow">
        @ChildContent(Item)
    </CascadingValue>
</DetailDialog>

@code {
    [Parameter]
    public bool Open { get; set; }
    [Parameter]
    public string Title { get; set; } = "Add Activity";
    [Parameter]
    public EventCallback OnClosed { get; set; } = EventCallback.Empty;
    [Parameter]
    public Nullable<int> Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(Id.HasValue)
        {
            Item = await uow.GetObjectByKeyAsync<TItem>(Id.Value);
        }
        else
        {
            Item = (TItem)uow.GetClassInfo(typeof(TItem)).CreateNewObject(uow);
        }
        await base.OnParametersSetAsync();
    }

    private TItem Item { get; set; }

    public async Task Close()
    {
        Item = null;
        uow.DropIdentityMap();
        Open = false;
        await OnClosed.InvokeAsync();
    }
    private async Task Save()
    {
        Console.WriteLine(Item);
        await uow.CommitChangesAsync();
    }
}